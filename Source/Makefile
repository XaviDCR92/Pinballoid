# Project-wise definitions
PROJECT = PB

# Make flags
#MAKEFLAGS := -j$(NUMBER_OF_PROCESSORS)

# GNU Toolchain definitions
CC = psx-gcc
AS = mipsel-unknown-elf-as
LINKER = psx-gcc
GNU_SIZE = mipsel-unknown-elf-size

# Custom define flags for GCC
DEFINE= -DFIXMATH_FAST_SIN -DVIDEO_MODE=VMODE_PAL
DEFINE += -DPSXSDK_DEBUG
DEFINE +=  -DNO_CDDA
DEFINE +=  -DNO_INTRO

# Compiler flags
LIBS= -lfixmath
CC_FLAGS = -Wall -Werror -c -Os -Wfatal-errors

# Path definitions
PSXSDK_PATH = /usr/local/psxsdk
PATH := $(PATH):$(PSXSDK_PATH)/bin/
PROJECT_DIR = ~/Pinballoid
CDROM_ROOT=$(PROJECT_DIR)/cdimg
BIN_TARGET_PATH = $(PROJECT_DIR)/Bin

#Uncomment this DEFINE below to use Pinballoid together with OpenSend + QPSXSerial toolchain.
#DEFINE +=  -DSERIAL_INTERFACE

# PSXSDK tools definitions
# ELF2EXE:
ELF2EXE = elf2exe
ELF2EXE_FLAGS = -mark="A homebrew game created with PSXSDK"
LICENSE_FILE = /usr/local/psxsdk/share/licenses/infoeur.dat
EXE_PATH = Exe

# PCSX-R
EMULATOR_DIR = ~/pcsxr
EMULATOR = pcsxr
# Uncomment the line below if you get no sound output under Linux.
SOUND_INTERFACE += padsp
EMULATOR_FLAGS = -nogui -psxout

# Objects definition
# Compiled objects list
OBJ_DIR = Obj
SRC_DIR = .
OBJECTS = $(addprefix $(OBJ_DIR)/,	main.o Gfx.o Interrupts.o IO.o Timers.o SystemInit.o	\
									Menu.o Game.o ThreadHandler.o)

# Source dependencies:
DEPS = $(OBJECTS:.o=.d)

# CD-DA objects:
MUSIC_TRACKS =
FFMPEG = ffmpeg
FFMPEG_DIR = ../Music/ffmpeg/bin
FFMPEG_FLAGS = -f s16le -acodec pcm_s16le

# Doxygen configuration file path:
DOXYFILE_PATH = $(PROJECT_DIR)/Documentation/Doxygen

# VAG objects:
SOURCE_SOUNDS_FOLDER = ../Sounds
OBJ_SOUNDS_DIR = ../cdimg/DATA/SOUNDS
#SOUND_OBJECTS = $(addprefix $(OBJ_SOUNDS_DIR)/,	BELL.VAG		\
#												ACCEPT.VAG		\
#												TRAYCL.VAG		\
#												SPINDISK.VAG	\
#												BEEP.VAG		\
#												TAKEOFF1.VAG	\
#												RCTM1F1.VAG		\
#												RCPW1A1.VAG		\
#												RCPM1A1.VAG		)
SOUND_OBJECTS =

# Sprite objects:
BMP2TIM = bmp2tim
SRC_SPRITES_PATH = $(PROJECT_DIR)/Sprites
OBJ_SPRITES_PATH = $(CDROM_ROOT)/DATA/SPRITES

# NOTE:	Fonts, despite still being .TIM files, are separated into another folder,
# 		so SPRITE_OBJECTS are splitted in two parts.
OBJ_FONTS_PATH = $(CDROM_ROOT)/DATA/FONTS
#SPRITE_OBJECTS += $(addprefix $(OBJ_FONTS_PATH)/,	FONT_1.TIM				\
#													FONT_2.TIM				)
SPRITE_OBJECTS =
# Instructions
# ------------------------------------

$(BIN_TARGET_PATH)/$(PROJECT).bin: $(EXE_PATH)/$(PROJECT).iso
	mkdir -p $(BIN_TARGET_PATH)
#~ 	mkpsxiso $< $@ $(LICENSE_FILE) $(MUSIC_TRACKS)
	mkpsxiso $< $@ $(LICENSE_FILE) -s
	# $(PROJECT).cue is automatically generated by mkpsxiso
	-@doxygen $(DOXYFILE_PATH)/Doxyfile
	$(GNU_SIZE) $(EXE_PATH)/$(PROJECT).elf

rebuild:
	make clean
	make $(BIN_TARGET_PATH)/$(PROJECT).bin

-include $(DEPS)

#music_objects:	$(addprefix ../Music/, TRACK01.bin TRACK02.bin TRACK03.bin)

clean:
	rm -f $(OBJ_DIR)/*.o
	rm -f $(OBJ_SOUNDS_DIR)/*.VAG
	rm -f $(OBJ_LEVELS_DIR)/*.LVL
	rm -f $(OBJ_LEVELS_DIR)/*.PLT
	rm -f $(OBJ_SPRITES_PATH)/*.TIM
	rm -f $(OBJ_FONTS_PATH)/*.TIM

$(OBJ_DIR)/%.d: $(SRC_DIR)/%.c
	$(CC) $< $(DEFINE) $(CC_FLAGS) -MM > $@

$(OBJ_DIR)/%.o: $(SRC_DIR)/%.c $(OBJ_DIR)/%.d
	$(CC) $< -o $@ $(DEFINE) $(CC_FLAGS) -MMD

$(OBJ_DIR)/%.o: $(SRC_DIR)/%.s
	$(AS) $< -o $@ $(AS_FLAGS)

$(EXE_PATH)/$(PROJECT).elf: $(OBJECTS)
	$(LINKER) $^ -o $@ $(LIBS) -Wl,--gc-sections

$(EXE_PATH)/$(PROJECT).iso: $(EXE_PATH)/$(PROJECT).exe $(SOUND_OBJECTS) $(LEVEL_OBJECTS) $(SPRITE_OBJECTS) $(APPS_OBJECTS)
	mkisofs -o $@ -V $(PROJECT) -sysid PLAYSTATION $(CDROM_ROOT)

$(EXE_PATH)/$(PROJECT).exe: $(EXE_PATH)/$(PROJECT).elf
	$(ELF2EXE) $< $@ $(ELF2EXE_FLAGS)
	mkdir -p $(CDROM_ROOT)
	cp $@ $(CDROM_ROOT)

run: $(BIN_TARGET_PATH)/$(PROJECT).bin
	export PATH=$$PATH:$(EMULATOR_DIR)
	$(EMULATOR) -cdfile $(PROJECT_DIR)/Bin/$(PROJECT).bin $(EMULATOR_FLAGS)

$(OBJ_SPRITES_PATH)/%.TIM: $(SRC_SPRITES_PATH)/%.bmp $(SRC_SPRITES_PATH)/%.flags
	mkdir -p $(OBJ_SPRITES_PATH)
	$(BMP2TIM) $< $@ `cat $(word 2,$^)`

$(OBJ_APPS_PATH)/%.EOL: $(SRC_APPS_PATH)/%.EOL
	mkdir -p $(OBJ_APPS_PATH)
	cp $^ $@

$(OBJ_FONTS_PATH)/%.TIM: $(SRC_SPRITES_PATH)/%.bmp $(SRC_SPRITES_PATH)/%.flags
	mkdir -p $(OBJ_FONTS_PATH)
	$(BMP2TIM) $< $@ `cat $(word 2,$^)`

$(OBJ_SOUNDS_DIR)/%.VAG: $(SOURCE_SOUNDS_FOLDER)/%.wav
	wav2vag $^	$@

%.bin: %.mp3
	rm -f ../Bin/$@1
	$(FFMPEG) -i $< $(FFMPEG_FLAGS) $@
	cp ../Music/$@ ../Bin/

# ----------------------------------------
# Phony targets
# ----------------------------------------
.PHONY: clean run rebuild
